from fastapi import FastAPIimport subprocessimport osimport timeapp = FastAPI()# Processesproc_camera = Noneproc_rtsp_server = Noneproc_ffmpeg = None@app.post("/start_stream")def start_stream():    global proc_camera, proc_rtsp_server, proc_ffmpeg    if proc_camera or proc_rtsp_server or proc_ffmpeg:        return {"status": "already running"}    # 1. Start libcamera-vid    camera_cmd = [        "rpicam-vid",        "-t", "0",        "--width", "1920", "--height", "1080",        "--framerate", "12.5",        "--shutter", "5000",        "--gain", "10",        "--brightness", "0.0",        "--contrast", "1.0",        "--awb", "auto",        "--denoise", "cdn_off",        "--codec", "h264",        "--profile", "baseline",        "--level", "4.2",        "--bitrate", "1000000",        "--inline",        "--listen", "-o", "tcp://192.168.100.100:3000"    ]    proc_camera = subprocess.Popen(camera_cmd)    # 2. Start mediamtx    rtsp_server_cmd = ["./mediamtx"]    proc_rtsp_server = subprocess.Popen(rtsp_server_cmd)        # Wait 3 seconds before starting ffmpeg    time.sleep(3)        # 3. Start ffmpeg    ffmpeg_cmd = [        "ffmpeg",        "-fflags", "+genpts+igndts",        "-use_wallclock_as_timestamps", "1",        "-analyzeduration", "10M",        "-probesize", "10M",        "-f", "h264",        "-i", "tcp://192.168.100.100:3000",        "-c", "copy",        "-rtsp_transport", "tcp",        "-threads", "4",        "-muxdelay", "0",        "-muxpreload", "0",        "-max_delay", "0",        "-f", "rtsp",        "rtsp://192.168.100.100:8554/stream"    ]    proc_ffmpeg = subprocess.Popen(ffmpeg_cmd)        return {"status": "started"}@app.post("/stop_stream")def stop_stream():    global proc_camera, proc_rtsp_server, proc_ffmpeg    for proc in (proc_ffmpeg, proc_rtsp_server, proc_camera):        if proc:            proc.terminate()    proc_camera = None    proc_rtsp_server = None    proc_ffmpeg = None    return {"status": "stopped"}@app.get("/status")def status():    return {        "camera_running": proc_camera is not None,        "rtsp_server_running": proc_rtsp_server is not None,        "ffmpeg_running": proc_ffmpeg is not None    }